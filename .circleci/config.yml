working_directory: &working_directory
  working_directory: ~/gazelle-server

docker_no_database: &docker_no_database
  docker:
    - image: thegazelle/gazelle-main-circleci-primary:0.0.4

docker_with_database: &docker_with_database
  docker:
    - image: thegazelle/gazelle-main-circleci-primary:0.0.4
    - image: mariadb:10.1
      environment:
        MYSQL_ROOT_PASSWORD: circleci_test_gazelle
        MYSQL_DATABASE: the_gazelle

defaults: &defaults
  <<: *working_directory
  <<: *docker_no_database

defaults_with_database: &defaults_with_database
  <<: *working_directory
  <<: *docker_with_database

version: 2
jobs:
  checkout_code:
    <<: *defaults
    steps:
      - checkout

      # Complete setup
      - run: |
          sed 's/"password",$/"circleci_test_gazelle",/' config/database.config.example.js > config/database.config.js
          cp config/s3.config.example.js config/s3.config.js
          cp config/ghost.config.example.js config/ghost.config.js

      # Cache it
      - run:
          name: save the SHA1 hash of git commit being built to file
          command: echo $CIRCLE_SHA1 > .circle-sha

      - save_cache:
          key: v1-repo-{{ checksum ".circle-sha" }}
          paths:
            - ~/gazelle-server

  install_dependencies:
    <<: *defaults
    steps:
      - run:
          name: save SHA to a file
          command: echo $CIRCLE_SHA1 > .circle-sha
      - restore_cache:
          keys:
            - v1-repo-{{ checksum ".circle-sha" }}

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v2-dependencies-{{ arch }}-{{ checksum "package-lock.json" }}

      - run: npm install

      - save_cache:
          paths:
            - node_modules
          key: v2-dependencies-{{ arch }}-{{ checksum "package-lock.json" }}

  unit_test:
    <<: *defaults
    steps:
      - run:
          name: save SHA to a file
          command: echo $CIRCLE_SHA1 > .circle-sha
      - restore_cache:
          keys:
            - v1-repo-{{ checksum ".circle-sha" }}
      - restore_cache:
          keys:
            - v2-dependencies-{{ arch }}-{{ checksum "package-lock.json" }}

      - run: npm run test:unit

  lint:
    <<: *defaults
    steps:
      - run:
          name: save SHA to a file
          command: echo $CIRCLE_SHA1 > .circle-sha
      - restore_cache:
          keys:
            - v1-repo-{{ checksum ".circle-sha" }}
      - restore_cache:
          keys:
            - v2-dependencies-{{ arch }}-{{ checksum "package-lock.json" }}

      - run: npm run lint

  fetch_test_database:
    <<: *defaults
    steps:
      - run:
          name: save SHA to a file
          command: echo $CIRCLE_SHA1 > .circle-sha
      - restore_cache:
          keys:
            - v1-repo-{{ checksum ".circle-sha" }}
      - restore_cache:
          keys:
            - v2-dependencies-{{ arch }}-{{ checksum "package-lock.json" }}
      - restore_cache:
          keys:
            - v1-database_dump-{{ checksum "scripts/circleci/fetch-test-database.sh" }}-{{ checksum "scripts/circleci/helpers/get-test-database-dump.js" }}

      - run:
          name: Get needed dependencies for fetch database
          command: '[[ -f scripts/circleci/helpers/test.dump ]] && npm i googleapis@12.4.0 google-auth-library@0.*'

      - run:
          name: Fetch test database
          command: '[[ -f scripts/circleci/helpers/test.dump ]] && ./scripts/circleci/fetch-test-database.sh'

      - save_cache:
          paths:
            - scripts/circleci/helpers/test.dump
          key: v1-database_dump-{{ checksum "scripts/circleci/fetch-test-database.sh" }}-{{ checksum "scripts/circleci/helpers/get-test-database-dump.js" }}

  build:
    <<: *defaults_with_database
    steps:
      - run:
          name: save SHA to a file
          command: echo $CIRCLE_SHA1 > .circle-sha
      - restore_cache:
          keys:
            - v1-repo-{{ checksum ".circle-sha" }}
      - restore_cache:
          keys:
            - v2-dependencies-{{ arch }}-{{ checksum "package-lock.json" }}
      - restore_cache:
          keys:
            - v1-database_dump-{{ checksum "scripts/circleci/fetch-test-database.sh" }}-{{ checksum "scripts/circleci/helpers/get-test-database-dump.js" }}

      - run:
          name: Wait for db
          command: dockerize -wait tcp://localhost:3306 -timeout 1m

      - run: ./scripts/circleci/load-test-database.sh

      # Complete config
      - run: ./scripts/get-ghost-config.sh

      - restore_cache:
          keys:
            - v1-build-{{ arch }}-{{ .Revision }}

      - run: npm run build:production

      - save_cache:
          paths:
            - build
            - static/build
          key: v1-build-{{ arch }}-{{ .Revision }}

  end_to_end_tests:
    <<: *defaults_with_database
    steps:
      - attach_workspace:
          at: ~/.ssh
      - run:
          name: save SHA to a file
          command: echo $CIRCLE_SHA1 > .circle-sha
      - restore_cache:
          keys:
            - v1-repo-{{ checksum ".circle-sha" }}
      - restore_cache:
          keys:
            - v2-dependencies-{{ arch }}-{{ checksum "package-lock.json" }}
      - restore_cache:
          keys:
            - v1-database_dump-{{ checksum "scripts/circleci/fetch-test-database.sh" }}-{{ checksum "scripts/circleci/helpers/get-test-database-dump.js" }}
      - restore_cache:
          keys:
            - v1-build-{{ arch }}-{{ .Revision }}

      - run:
          name: Wait for db
          command: dockerize -wait tcp://localhost:3306 -timeout 1m

      - run: ./scripts/circleci/load-test-database.sh

      - run:
          name: Clone Ghost repo
          command: |
            cd ~
            git clone git@github.com:thegazelle-ad/database-and-ghost-blog-server.git

      - restore_cache:
          keys:
            - v1-ghost-dependencies-and-config-{{ arch }}-{{ checksum "~/database-and-ghost-blog-server/package.json" }}

      - run:
          name: Setup Ghost
          command: |
            cd ~/database-and-ghost-blog-server
            sed "s/'password'/'circleci_test_gazelle'/" config.example.js > config.js
            . ~/.nvm/nvm.sh
            npm install --production

      - save_cache:
          paths:
            - ~/database-and-ghost-blog-server/node_modules
            - ~/database-and-ghost-blog-server/config.js
          key: v1-ghost-dependencies-and-config-{{ arch }}-{{ checksum "~/database-and-ghost-blog-server/package.json" }}

      # Actually run the tests
      - run: ./scripts/circleci/run-end-to-end-tests.sh

  prep_ssh:
    <<: *defaults
    steps:
      # Setup known_hosts so the VM allows ssh access without the prompt
      - run:
          name: Add server ssh keys to known_hosts
          command: mkdir -p ~/.ssh && ssh-keyscan -t rsa "$GAZELLE_SERVER_STAGING_IP" "$GAZELLE_SERVER_PRODUCTION_IP" >> ~/.ssh/known_hosts

      - run:
          name: Add Github RSA key to known_hosts
          command: ssh-keyscan -t rsa github.com >> ~/.ssh/known_hosts

      - persist_to_workspace:
          root: ~/.ssh
          paths:
            - known_hosts

  deploy_staging:
    <<: *defaults
    steps:
      - attach_workspace:
          at: ~/.ssh

      - run:
          name: Deploy to staging
          command: ssh "$GAZELLE_SERVER_STAGING_USER@$GAZELLE_SERVER_STAGING_IP" 'bash -ic "deployment-resources/scripts/update-source.sh"'

  deploy_production:
    <<: *defaults
    steps:
      - attach_workspace:
          at: ~/.ssh

      - run:
          name: Deploy to production
          command: ssh "$GAZELLE_SERVER_PRODUCTION_USER@$GAZELLE_SERVER_PRODUCTION_IP" 'bash -ic "deployment-resources/scripts/update-source.sh"'

workflows:
  version: 2
  build_test_deploy:
    jobs:
      - checkout_code

      - prep_ssh

      - install_dependencies:
          requires:
            - checkout_code

      - unit_test:
          requires:
            - install_dependencies
      - lint:
          requires:
            - install_dependencies
      - fetch_test_database:
          requires:
            - install_dependencies

      - build:
          requires:
            - fetch_test_database
      - end_to_end_tests:
          requires:
            - build
            - prep_ssh

      # Deployment related
      - deploy_staging:
          requires:
            - unit_test
            - lint
            - end_to_end_tests
            - prep_ssh
          filters:
            branches:
              only: master
      - deploy_production:
          requires:
            - unit_test
            - lint
            - end_to_end_tests
            - prep_ssh
          filters:
            branches:
              only: stable
