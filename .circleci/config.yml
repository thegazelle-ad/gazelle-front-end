working_directory: &working_directory
  working_directory: ~/gazelle-server

docker_no_database: &docker_no_database
  docker:
    - image: thegazelle/gazelle-main-circleci-primary:0.0.1

docker_with_database: &docker_with_database
  docker:
    - image: thegazelle/gazelle-main-circleci-primary:0.0.1
    - image: mariadb:10.1
      environment:
        MYSQL_ROOT_PASSWORD: circleci_test_gazelle
        MYSQL_DATABASE: the_gazelle

defaults: &defaults
  <<: *working_directory
  <<: *docker_no_database

defaults_with_database: &defaults_with_database
  <<: *working_directory
  <<: *docker_with_database

version: 2
jobs:
  checkout_code:
    <<: *defaults
    steps:
      - checkout

      # Complete setup
      - run: |
          cp config/database.config.example.js config/database.config.js
          cp config/s3.config.example.js config/s3.config.js
          cp config/ghost.config.example.js config/ghost.config.js

      # Cache it
      - run:
          name: save the SHA1 hash of git commit being built to file
          command: echo $CIRCLE_SHA1 > .circle-sha

      - save_cache:
          key: v1-repo-{{ checksum ".circle-sha" }}
          paths:
            - ~/gazelle-server

  install_dependencies:
    <<: *defaults
    steps:
      - run:
          name: save SHA to a file
          command: echo $CIRCLE_SHA1 > .circle-sha
      - restore_cache:
          keys:
            - v1-repo-{{ checksum ".circle-sha" }}

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v2-dependencies-{{ arch }}-{{ checksum "npm-shrinkwrap.json" }}

      - run: npm install

      - save_cache:
          paths:
            - node_modules
          key: v2-dependencies-{{ arch }}-{{ checksum "npm-shrinkwrap.json" }}

  unit_test:
    <<: *defaults
    steps:
      - run:
          name: save SHA to a file
          command: echo $CIRCLE_SHA1 > .circle-sha
      - restore_cache:
          keys:
            - v1-repo-{{ checksum ".circle-sha" }}
      - restore_cache:
          keys:
            - v2-dependencies-{{ arch }}-{{ checksum "npm-shrinkwrap.json" }}

      - run: npm test

  lint:
    <<: *defaults
    steps:
      - run:
          name: save SHA to a file
          command: echo $CIRCLE_SHA1 > .circle-sha
      - restore_cache:
          keys:
            - v1-repo-{{ checksum ".circle-sha" }}
      - restore_cache:
          keys:
            - v2-dependencies-{{ arch }}-{{ checksum "npm-shrinkwrap.json" }}

      - run: npm run lint

  fetch_test_database:
    <<: *defaults
    steps:
      - run:
          name: save SHA to a file
          command: echo $CIRCLE_SHA1 > .circle-sha
      - restore_cache:
          keys:
            - v1-repo-{{ checksum ".circle-sha" }}
      - restore_cache:
          keys:
            - v2-dependencies-{{ arch }}-{{ checksum "npm-shrinkwrap.json" }}
      - restore_cache:
          keys:
            - v1-database_dump-{{ checksum "scripts/circleci/fetch-test-database.sh" }}-{{ checksum "scripts/circleci/helpers/get-test-database-dump.js" }}

      - run: ./scripts/circleci/fetch-test-database.sh

      - save_cache:
          paths:
            - scripts/circleci/helpers/test.dump
          key: v1-database_dump-{{ checksum "scripts/circleci/fetch-test-database.sh" }}-{{ checksum "scripts/circleci/helpers/get-test-database-dump.js" }}

  build:
    <<: *defaults_with_database
    steps:
      - run:
          name: save SHA to a file
          command: echo $CIRCLE_SHA1 > .circle-sha
      - restore_cache:
          keys:
            - v1-repo-{{ checksum ".circle-sha" }}
      - restore_cache:
          keys:
            - v2-dependencies-{{ arch }}-{{ checksum "npm-shrinkwrap.json" }}
      - restore_cache:
          keys:
            - v1-database_dump-{{ checksum "scripts/circleci/fetch-test-database.sh" }}-{{ checksum "scripts/circleci/helpers/get-test-database-dump.js" }}

      - run:
          name: Wait for db
          command: dockerize -wait tcp://localhost:3306 -timeout 1m

      - run: ./scripts/circleci/load-test-database.sh

      # Complete config
      - run: ./scripts/get-ghost-config.sh

      - restore_cache:
          keys:
            - v1-build-{{ arch }}-{{ .Revision }}

      - run: npm run build-production

      - save_cache:
          paths:
            - build
            - static/build
          key: v1-build-{{ arch }}-{{ .Revision }}

  end_to_end_test:
    <<: *defaults_with_database
    steps:
      - run:
          name: save SHA to a file
          command: echo $CIRCLE_SHA1 > .circle-sha
      - restore_cache:
          keys:
            - v1-repo-{{ checksum ".circle-sha" }}
      - restore_cache:
          keys:
            - v2-dependencies-{{ arch }}-{{ checksum "npm-shrinkwrap.json" }}
      - restore_cache:
          keys:
            - v1-database_dump-{{ checksum "scripts/circleci/fetch-test-database.sh" }}-{{ checksum "scripts/circleci/helpers/get-test-database-dump.js" }}
      - restore_cache:
          keys:
            - v1-build-{{ arch }}-{{ .Revision }}

      - run:
          name: Wait for db
          command: dockerize -wait tcp://localhost:3306 -timeout 1m

      - run: ./scripts/circleci/load-test-database.sh

      # Currently this whole job is just a placeholder but we will add super awesome E2E tests here
      # the plan is to pull in the crawler test repo and if we get around to it before we ditch ghost
      # then also pull in the ghost repo, boot everything up and then run our awesome E2E tests
      - run: ./scripts/circleci/main-gazelle-pages-test.sh

  prep_deploy:
    <<: *defaults
    steps:
      # Setup known_hosts so the VM allows ssh access without the prompt
      - run:
          name: Add server ssh key to known_hosts
          command: mkdir -p ~/.ssh && echo '|1|lngQecMeLZI49/+fr5Ee0gOWaKE=|arylHILm4qsNJewDKKwFKOijBxE= ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBLONO0airQQL9d1rOZzT/p3SBH8acSYaN4N8qJezd/0UbnF8SBi+m1wB2nay5o0HQBQTM6O+MKXDwzYec886K78=' >> ~/.ssh/known_hosts
      - persist_to_workspace:
          root: ~/.ssh
          paths:
            - known_hosts

  deploy_staging:
    <<: *defaults
    steps:
      - attach_workspace:
          at: ~/.ssh

      - run:
          name: Deploy to staging
          command: ssh gazelle@51.15.130.216 ./deployment/update-beta.sh

  deploy_production:
    <<: *defaults
    steps:
      - attach_workspace:
          at: ~/.ssh

      - run:
          name: Deploy to production
          command: ssh gazelle@51.15.130.216 ./deployment/update-production.sh

workflows:
  version: 2
  build_test_deploy:
    jobs:
      - checkout_code

      - install_dependencies:
          requires:
            - checkout_code

      - unit_test:
          requires:
            - install_dependencies
      - lint:
          requires:
            - install_dependencies
      - fetch_test_database:
          requires:
            - install_dependencies

      - build:
          requires:
            - fetch_test_database
      - end_to_end_test:
          requires:
            - build

      # Deployment related
      - prep_deploy:
          filters:
            branches:
              only:
                - master
                - stable
      - deploy_staging:
          requires:
            - unit_test
            - lint
            - end_to_end_test
            - prep_deploy
          filters:
            branches:
              only: master
      - deploy_production:
          requires:
            - unit_test
            - lint
            - end_to_end_test
            - prep_deploy
          filters:
            branches:
              only: stable
